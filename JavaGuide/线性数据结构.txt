# 1.线性数据结构

数组、链表、栈、队列



# 2.数组

**数组（Array）** 是一种很常见的数据结构。它由**相同类型**的元素（element）组成，并且是使用**一块连续的内存**来存储。

我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。

数组的特点是：**提供随机访问** 并且容量有限。

```
假如数组的长度为 n。
访问：O（1）//访问特定位置的元素
插入：O（n ）//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时
删除：O（n）//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时
```



# 3.链表

### 3.1	简介

**链表（LinkedList）** 虽然是一种线性表，但是它不是按连续的内存空间来存储数据。

链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。

使用链表结构不需要预先知道链表会存储多少个元素。

链表元素不是连续存储，意味着可以灵活利用计算机内存空间理。

但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。

除此之外，链表不具有数组随机读取的优点。O(n)。



```
假如链表中有n个元素。
访问：O（n）//访问特定位置的元素
插入删除：O（1）//必须要要知道插入元素的位置
```

分类：

- 单链表

**单链表** 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。链表这种数据结构通常在物理内存上是不连续的。第一个结点叫作头结点，头结点通常不保存任何值，通过头结点我们可以遍历整个链表。尾结点通常指向 null。

- 双向链表

循环链表的尾结点不是指向 null，而是指向链表的头结点。

- 循环链表

**双向链表** 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。

- 双向循环链表

**双向循环链表** 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。



### 3.2	注意

- 链表不支持随机访问
- 链表不需要预先知道元素个数，并且可以方便地添加和删除数据
- 如果预先知道数据元素个数，并且要经常访问特定位置的元素、不经常做增加、删除，可以使用数组。

### 3.3	数组 vs 链表

- 数组支持随机访问，而链表不支持。
- 数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。
- 数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！





# 4.栈

## 4.1	简介

**栈** (stack)只在线性表的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 **后进先出（LIFO, Last In First Out）** 的原理运作。**在栈中，push 和 pop 的操作都发生在栈顶。**

栈常用一维数组或链表来实现，用数组实现的栈叫作 **顺序栈** ，用链表实现的栈叫作 **链式栈** 。

```
假设堆栈中有n个元素。
访问：O（n）//最坏情况
插入删除：O（1）//顶端插入和删除元素
```



## 4.2	场景

只涉及在一端插入和删除数据，并且满足 **后进先出（LIFO, Last In First Out）** 的特性时

- 实现浏览器的回退和前进功能
- 检查符号是否成对出现
  - 括号匹配
- 反转字符串
- 函数嵌套调用
  - 最后一个被调用的函数必须先完成执行，符合栈的 **后进先出（LIFO, Last In First Out）** 特性。



## 4.3	实现

栈既可以通过数组实现，也可以通过链表来实现。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。

栈具有`push()`、`pop()`（返回栈顶元素并出栈）、`peek()` （返回栈顶元素不出栈）、`isEmpty()`、`size()`这些基本的方法。

public class MyStack {
    private int[] storage;//存放栈中元素的数组
    private int capacity;//栈的容量
    private int count;//栈中元素数量
    private static final int GROW_FACTOR = 2;

```java
//不带初始容量的构造方法。默认容量为8
public MyStack() {
    this.capacity = 8;
    this.storage=new int[8];
    this.count = 0;
}

//带初始容量的构造方法
public MyStack(int initialCapacity) {
    if (initialCapacity < 1)
        throw new IllegalArgumentException("Capacity too small.");

    this.capacity = initialCapacity;
    this.storage = new int[initialCapacity];
    this.count = 0;
}

//入栈
public void push(int value) {
    if (count == capacity) {
        ensureCapacity();
    }
    storage[count++] = value;
}

//确保容量大小
private void ensureCapacity() {
    int newCapacity = capacity * GROW_FACTOR;
    storage = Arrays.copyOf(storage, newCapacity);
    capacity = newCapacity;
}

//返回栈顶元素并出栈
private int pop() {
    if (count == 0)
        throw new IllegalArgumentException("Stack is empty.");
    count--;
    return storage[count];
}

//返回栈顶元素不出栈
private int peek() {
    if (count == 0){
        throw new IllegalArgumentException("Stack is empty.");
    }else {
        return storage[count-1];
    }
}

//判断栈是否为空
private boolean isEmpty() {
    return count == 0;
}

//返回栈中元素的个数
private int size() {
    return count;
}

}
```



# 5.队列

## 5.1	简介

**队列** 是 **先进先出( FIFO，First In, First Out)** 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 **顺序队列** ，用链表实现的队列叫作 **链式队列** 。**队列只允许在后端（rear）进行插入操作也就是 入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue**

```
假设队列中有n个元素。
访问：O（n）//最坏情况
插入删除：O（1）//后端插入前端删除元素
```



## 5.2	分类

- 单队列
- 循环队列

**单队列：**

单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为 **顺序队列（数组实现）** 和 **链式队列（链表实现）**。

**顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。**

原因：当进行入队、出队操作的时候，front 和 rear 都会持续往后移动，当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 **”假溢出“** 。



**循环队列：**

循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。



顺序队列中，我们说 `front==rear` 的时候队列为空，循环队列中则不一样，也可能为满，如上图所示。解决办法有两种：

1. 可以设置一个标志变量 `flag`,当 `front==rear` 并且 `flag=0` 的时候队列为空，当`front==rear` 并且 `flag=1` 的时候队列为满。
2. 队列为空的时候就是 `front==rear` ，队列满的时候，我们保证数组还有一个空闲的位置，rear 就指向这个空闲位置，如下图所示，那么现在判断队列是否为满的条件就是： `(rear+1) % QueueSize= front` 。



## 5.3	场景

- 阻塞队列
  - 生产者——消费者
- 线程池里的请求/任务队列

- 消息队列
- 
  - 