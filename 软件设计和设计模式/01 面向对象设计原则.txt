# 0.问题与总结

## 0.1	问题

- 在 JDK 中，java.util.Stack是 java.util.Vector类的子类，该设计合理吗？若 不合理，请分析解释该设计存在的问题。

### 什么是Vector类？

Vector 类实现了一个动态数组。和 ArrayList 很相似，但是两者是不同的：

- Vector 是同步访问的。
- Vector 包含了许多传统的方法，这些方法不属于集合框架。

Vector 主要用在事先不知道数组的大小，或者只是需要一个可以改变大小的数组的情况。

### 什么是Stack类？

Stack类是栈，是一种先进后出、后进先出的线性结构，可以通过数组或链表实现；

方法主要有：

 E push(E item) 
          把项压入堆栈顶部。 
 E pop() 
          移除堆栈顶部的对象，并作为此函数的值返回该对象。 
 E peek() 
          查看堆栈顶部的对象，但不从堆栈中移除它。 
 boolean empty() 
          测试堆栈是否为空。  
 int search(Object o) 
          返回对象在堆栈中的位置，以 1 为基数。



- 根据里氏替换原则LSP和合成复用原则，显然这是不合适的设计！
  - Stack是Vector的子类，那么Vector出现的地方，Stack都能替代吗？
    - 显然不能吧
  - 这带来了一个坏处：无法声明一个Vector类，然后在运行时用Stack子类替换他
  - 耦合较高，而且这种耦合带来的代码复用其实也非常少……



## 0.2	小结

- OO软件系统设计来说，关键是如何提供复用的可维护性。
- 软件复用可以降本增效
- 七龙珠
  - 目标是开闭原则：对扩展开放，对修改关闭
  - 手段是依赖倒置：面向接口编程
  - 2个不太重要：迪米特法则和接口隔离原则
  - 3个比较重要的原则
    - LSP 里氏代换原则
    - SRP 单一职责原则和可变性封装原则
    - CRP 合成复用原则





# 1.软件设计

### 软件设计的4个层次

- 需求：软件**功能**；软件能做什么
- 规约：系统外部能观察到什么，**对外**提供了什么，**用户接口**
- 架构：系统的主要组成部分（结构划分）；组成部分之间的交互；技术；宏观
- 设计：
  - 在架构的下一层，如何完成任务，需要怎样写代码，关注OO设计
  - 具体；微观



### 面向对象软件设计

- 约束条件与面向对象的概念模型结合
- 属性和方法构成类
- 抽象类和接口用于规范类之间的关系
- 描述类如何构成组件



### OOD所处环节

![image-20220312200714188](img/image-20220312200714188.png)

- 处于编程实现和架构设计之间；
- 不同于将领和士兵，OOD更像是军官的职责；或者说，不像是校长和学生，OOD像是班主任的角色。



### 如何发现合适的对象

- OOD的难点就在于如何将上层的设计架构组件，分解为1个个对象
- 对象直接来自于分析模型、实现空间等等



### 经验非常重要

![image-20220312200852175](img/image-20220312200852175.png)



# 2.面向对象设计原则

<img src="img/image-20220312200905092.png" alt="image-20220312200905092" style="zoom:80%;" />



### 原则概述

![image-20220312200941569](img/image-20220312200941569.png)

- 复用性：提高效率，降低成本
- 可维护性：或者叫灵活性，主要包括可扩展性、可读性等

可维护性复用

- 重构：不改变软件功能（对外接口）的基础上，调整程序代码，使其架构和设计模式更加具有可维护性和复用性



## 七龙珠

![image-20220312201148269](img/image-20220312201148269.png)

**最重要的2个原则，必须采用的2个原则：**

- OCP 开闭原则
  - 对扩展开放，对修改关闭，不修改软件的基础上添加功能
- DIP 依赖倒置原则
  - 面向接口编程，面向共识编程

**3个次要规则**：

- SRP 单一职责
  - 类的职责尽量单一化，简单化
- LSP 里氏代换原则
  - 父类能做的，子类必然可以做
- CRP 合成复用原则
  - 尽量使用聚合组合，而非强耦合的继承关系

**2个不必要的参考原则：**

- 接口隔离原则
  - 多个接口，而非一个大接口
- 迪米特法则（最少知道原则）
  - 通过朋友间接通信

# 3.七龙珠详解

## 3.1	单一职责原则 SRP

**定义：**

- 一个对象只包含**单一职责**；并且被完整封装在一个类里
- 一个类只有**1个引起它变化的原因**



**分析/动机：**

- 一个类职责越多，被复用的可能性越小，需要不停修改的可能性越差
- 属性数据职责、方法行为职责
- 实现高内聚、低耦合的方针之一



**案例：**

![image-20220312201847341](img/image-20220312201847341.png)

- 一个登陆类，为什么需要客户端的启动方法？
- 一个登陆类为什么需要把findUser、display和获取连接？

**重构以后：**

![image-20220312201957992](img/image-20220312201957992.png)



## 3.2* 开闭原则（最重要）

**定义**：

- 对扩展开放，对修改封闭
- 扩展新功能时，不需要修改原来的代码

**分析：**

- 抽象化是开闭原则的关键
- 支持原则：**可变性封装原则**
  - 将一个类中所有可能引起类变化的字段全部集合、封装起来

**实例：**

![image-20220312202219050](img/image-20220312202219050.png)

- 可以让他们继承1个父类

![image-20220312202234220](img/image-20220312202234220.png)

- 当我们定义好了LoginForm和抽象类，对用户界面来说，内部的变化就可以“对扩展开放，对修改关闭”





## 3.3	里氏代换原则	LSP

**定义**：

![image-20220312211057769](img/image-20220312211057769.png)

- 所有子类都能替换父类，反之则不然



**分析**：

- 如果能使用父类，那么一定能使用子类；父类出现的地方，子类一定也能出现
- 里氏代换原则是显示开闭原则的重要方式之一，由于有基类的地方都可以用子类，所以不妨尽可能广泛的使用父类、定义父类接口，运行时再确定子类
  - 工厂方法
  - 策略模式
  - ……



**实例**

![image-20220312211307650](img/image-20220312211307650.png)



## 3.4	依赖倒置原则	DIP

**定义**：

![image-20220312211423941](img/image-20220312211423941.png)

- 面向接口编程

- 接口，接口，接口；

  - 共识，共识，共识；合同，合同，合同；法律，法律，法律；

  

**分析**：

![image-20220312211620023](img/image-20220312211620023.png)

- 代码要依赖于抽象的、确定的类或接口，不能依赖具体的实现类；
- 面向接口编程；面向抽象编程；
- 开闭原则是OO设计的目标，依赖倒置原则是OO设计的主要手段



**类之间的耦合**：

- 零耦合
- 具体耦合
- 抽象耦合

DIP原则要求客户端依赖于抽象耦合，以抽象耦合是依赖倒置的关键；



**实例**：

![image-20220312211803667](img/image-20220312211803667.png)

![image-20220312211812132](img/image-20220312211812132.png)

![image-20220312211819492](img/image-20220312211819492.png)



## 3.5	接口隔离原则 ISP

**定义**：

- 客户端不应该依赖他不需要的接口
- 一个接口如果太大、太臃肿，那需要将它分割成一个更细小的接口

![image-20220312212010213](img/image-20220312212010213.png)

- 有点类似于单一职责原则在接口的对应



**分析**：

- 单一职责；高内聚低耦合原则
- 定制服务，为不同的客户端提供宽窄不同的接口

![image-20220312212117923](img/image-20220312212117923.png)

![image-20220312212123185](img/image-20220312212123185.png)



## 3.6	合成复用原则 CRP

**定义**：

- 又称组合聚合原则
- 尽量使用组合聚合，而不是耦合度很高的继承关系
  - 其实跟LSP比较像



**分析**：

![image-20220312212221032](img/image-20220312212221032.png)

- 继承复用
  - 实现简单，易于扩展
  - 但是破坏系统的封装性；
  - 不能在运行时发生改变，没有足够灵活性
  - **白箱复用**
- 组合聚合复用
  - 耦合度较低
  - **黑箱复用**



![image-20220312212443629](img/image-20220312212443629.png)



实例：

![image-20220312212515234](img/image-20220312212515234.png)

![image-20220312212520344](img/image-20220312212520344.png)

![image-20220312212529083](img/image-20220312212529083.png)



## 3.7	迪米特法则

- 不要直接和远方通信
- 和朋友通信
- 每一个软件单位只需要对其他单位有最少的知识
- 来自美国东北大学的Demeter项目



**分析：**

朋友：

- 本身
- 内部（成员变量、成员方法、传入参数）

![image-20220312212643165](img/image-20220312212643165.png)



**狭义迪米特：**其实不是特别必要（）

![image-20220312212714007](img/image-20220312212714007.png)



![image-20220312212742535](img/image-20220312212742535.png)

![image-20220312212752144](img/image-20220312212752144.png)



实例：

![image-20220312212803569](img/image-20220312212803569.png)

重构以后：

![image-20220312212812041](img/image-20220312212812041.png)