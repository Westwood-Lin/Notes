# 1.Refer

陶兆胜《服务端计算》课程（上课+PPT+代码+作业）

Spring实战 第四版	Craig Walls

Spring实战 第五版	Craig Walls

SpringBoot实战



Dhanji R. Prasanna的《Dependency Injection》

# 2.Spring实战（4th）

适用场景：企业级Java应用开发测试。

适用人群：有一定Java基础的、面向企业级Java应用的程序开发或者测试人员。

优点：

- 模块化
- 易用
- 功能庞大
- 简化企业级应用开发
- ……

> ## 代码规范与下载
>
> 本书中有大量的示例代码。这些代码将会使用固定宽度的代码字体。本书正文中的类名、方法名或XML片段也都使用代码字体。
>
> 很多Spring类和包的名字很长（不过会有较强的表达性）。鉴于此，我们有时候会用到换行符（➥）。
>
> 本书中的示例代码并不都是完整的。为了关注某个主题，我有时候只会展示类的一个或两个方法。本书所构建的应用程序完整代码可以在出版社站点上下载，地址是www.manning.com/SpringinActionFourthEdition。
>
> ## 作者在线
>
> 购买了本书，读者就可以免费访问Manning出版社提供的在线论坛，在这里读者可以给本书写评论，问一些技术问题并可以得到作者和其他用户的帮助。要进入这个论坛或订阅它，读者可以在浏览器中访问www.manning.com/SpringinActionFourthEdition。这个页面会告诉读者注册后怎样进入论坛，能够得到什么帮助以及论坛的规则。
>
> Manning对读者的许诺是为读者提供一个交流平台，在这里读者之间以及读者和作者之间可以进行有意义的交流。对于作者来说，对论坛进行多少次的访问不是强制的，他们对本书论坛的贡献是自愿和免费的。我们建议读者尽量向作者问一些有挑战性的问题，以保持他们的兴趣！



译者序里有趣的话：

> 本书的主题是Spring框架，从十多年前问世以来，它一直致力于简化JEE应用的开发。从最初的挑战者，到现在诸多标准的制定者；从传统的JEE应用，到大数据、NoSQL、企业应用集成、批处理、移动开发等领域，Spring都在参与和发挥影响力。新版本的Spring提供了更加丰富的功能，但更重要的是Spring在想尽办法简化开发人员的使用，包括自动配置、基于Java的配置，还有现在越来越受到欢迎的Spring Boot。Spring Boot是对Spring本身的一种颠覆和革命，但是唯有这种颠覆，才会换来开发人员更多的喜爱和框架本身的发展。

在之前，只有XML配置，相对繁琐。后续的Spring相继推出了自动配置和Java配置方式，又加强了各种服务的集成能力，同时也提出了全新的、颠覆式的**SpringBoot开发方式**。



## 2.1	Spring核心特性——IOC和AOP

### 概要：

Bean，可以当做一个程序中需要使用的Java对象。

DI，依赖注入，就是管理Bean和Bean之间的关系。

AOP，面向切面编程，就是可以在一系列业务逻辑中同时平行地加入一些公用的逻辑，比如在订单、客户、供应商管理这些逻辑里同时加入公用的权限认证、缓存、日志记录等等逻辑。

Spring通过面向POJO编程、DI、切面和模板技术来简化Java开发中的复杂性。



DI：

**当某个角色(可能是**一个Java实例，调用者)需要另一个角色(另一个Java实例，被调用者)的协助时，在 传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在Spring里，创建被调用者的工作不再由调用者来完成，因此称为控制反转;创建被调用者 实例的工作通常由Spring容器来完成，然后**注入**调用者，因此也称为**依赖注入**。



### 2.1.1	Spring之旅

一段有趣的话：

> 在Java近20年的历史中，它经历过很好的时代，也经历过饱受诟病的时代。尽管有很多粗糙的地方，如applet、企业级JavaBean（Enterprise JavaBean，EJB）、Java数据对象（Java Data Object，JDO）以及无数的日志框架，但是作为一个平台，Java的历史是丰富多彩的，有很多的企业级软件都是基于这个平台构建的。Spring是Java历史中很重要的组成部分。

可以看出，Java虽然因为applet、浏览器而火，但实际上却不能因它们发扬光大。





实际上，在Spring诞生之前，Sun和Oracle推出的是EJB Enterprise Java Bean规范，这是一个相当重量级的Java开发框架。

JEE实际上是受到了Spring的影响和启发，后续也跟进了DI和AOP的功能。







Spring的根本、原始、核心理念：**简化Java开发，尤其是简化企业级Java应用程序开发。**

Spring降低复杂性的4种策略：

- 基于POJO的轻量级和最小侵入性的编程
- 依赖注入和面向接口实现松耦合
- 通过AOP、惯例、模板提高复用效率，进行声明式编程



> 耦合具有两面性（two-headed beast）。一方面，紧密耦合的代码难以测试、难以复用、难以理解，并且典型地表现出“打地鼠”式的bug特性（修复一个bug，将会出现一个或者更多新的bug）。另一方面，一定程度的耦合又是必须的——完全没有耦合的代码什么也做不了。为了完成有实际意义的功能，不同的类必须以适当的方式进行交互。总而言之，耦合是必须的，但应当被小心谨慎地管理。



##### 1.DI 依赖注入

Spring的非侵入性编程：

![image-20220405211933871](img/image-20220405211933871.png)





Spring相关：

- 没有任何地方表明它是一个Spring组件。Spring的非侵入编程模型意味着这个类在Spring应用和非Spring应用中都可以发挥同样的作用
- DI带来的最大益处：松耦合
- 创建组件之间协作的行为通常称为装配（wiring）



##### XML配置方式：

注意写法

<bean id="" id后面跟name

clas="" 后面跟类路径

\>

\<constructor-arg ref="quest" /> 需要注入的参数

<img src="img/image-20220405213856452.png" alt="image-20220405213856452" style="zoom:50%;" />



##### Java Config方式：



<img src="img/image-20220405213910274.png" alt="image-20220405213910274" style="zoom:50%;" />

注意注解

@Configuration

@Bean



##### XML方式的上下文加载：

<img src="img/image-20220405214237491.png" alt="image-20220405214237491" style="zoom:50%;" />

- ClassPathXmlApplication（路径）
- getBean(Bean的id或名称)获取



##### 2.面向切面编程

一个复杂的系统由一系列具有相对独立和内聚的功能组成，这些功能间存在一些公共的、额外的、与自身存在弱关系的功能——日志记录、安全控制、缓存、事务化等等。

如果将这些相关的功能写入到它们的Java类中，那么：

- 导致这些Java类本身的内聚性降低，业务职责变得不够独立，耦合性变高
- 代码重复率变高
- 更高的耦合意味着不便于更改、测试、维护
- 简化之前：

<img src="img/image-20220405214841160.png" alt="image-20220405214841160" style="zoom:50%;" />

- 简化之后：

<img src="img/image-20220405215010949.png" alt="image-20220405215010949" style="zoom:50%;" />



如果有一种办法，将日志、缓存、安全、事务这些横切关注点与普通的组件内容分开开发，通过某种方式组合在一起，将大大简化开发难度。

通过吟游诗人+骑士的例子说明AOP的重要性，比较生动形象：

<img src="img/image-20220405215458002.png" alt="image-20220405215458002" style="zoom:80%;" />



##### XML方式使用AOP：

<img src="img/image-20220405215910362.png" alt="image-20220405215910362" style="zoom:50%;" />





##### 3.模板

**模板能够让你的代码关注于自身的职责**

![image-20220405234713406](img/image-20220405234713406.png)

> 正如你所看到的，这段JDBC代码查询数据库获得员工姓名和薪水。我打赌你很难把上面的代码逐行看完，这是因为少量查询员工的代码淹没在一堆JDBC的样板式代码中。首先你需要创建一个数据库连接，然后再创建一个语句对象，最后你才能进行查询。为了平息JDBC可能会出现的怒火，你必须捕捉`SQLException`，这是一个检查型异常，即使它抛出后你也做不了太多事情。
>
> 最后，毕竟该说的也说了，该做的也做了，你不得不清理战场，关闭数据库连接、语句和结果集。同样为了平息JDBC可能会出现的怒火，你依然要捕捉`SQLException`。
>
> **极度繁琐**
>
> JDBC不是产生样板式代码的唯一场景。在许多编程场景中往往都会导致类似的样板式代码，JMS、JNDI和使用REST服务通常也涉及大量的重复代码。
>
> Spring的JdbcTemplate使得执行数据库操作时，避免传统的JDBC样板代码成为了可能。







### 2.1.2	容器

Spring容器负责创建对象，装配它们，配置它们并管理它们的整个生命周期，从生存到死亡（在这里，可能就是`new`到`finalize()）`。









## 2.2	SpringWeb

### 概要：

- SpringWeb中主要的框架——Spring MVC
  - 控制器响应请求
  - 模型数据来响应
- 模型数据使用视图进行渲染
  - JSP、APacheTiles、Thymeleaf技术
- 更多细节
  - 自定义SpringMVC配置
  - 处理文件上次
  - Controller异常
  - Flash属性在请求间传递数据
- SpringWebFlow
  - 会话式的Web应用程序
- SpringSecurity



## 2.3	在后端使用Spring——数据持久化与其他

### 概要：

关注处理和持久化数据。

- Spring使用JDBC
- Spring使用JPA
- Spring使用非关系型数据库
  - MongoDB
  - Neo4j
- 缓存
- SpringSecurity











## 2.4	Spring集成其他服务

### 概要：

- 远程服务：
  - RMI、Hessian、Burlap、SOAP服务
- RESTful风格的服务
- Spring异步
  - Java消息 JMS
  - 高级消息队列协议 AMQP
- Spring异步高级：WebSocket+STOMP
- Spring Email
- SPring对JMX的支持
- **SpringBoot**

