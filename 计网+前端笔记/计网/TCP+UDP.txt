# 1.TCP、UDP的区别与联系

最常用的网络数据传输协议：

- TCP、UDP
- 在OSI七层中的第四层**传输层**
- 在程序间传输数据
  - 程序：文件、图片、视频



## 区别：

- TCP
  - 打电话 确认对方——通话——挂断
  - **基于连接的**
  - **3次握手、传输确认、4次挥手**
  - **全双工的**
- UDP
  - 写信
    - 数据顺序、确认收到
  - 无连接的、非连接的
  - 不可靠的



## TCP的三次握手：

![image-20220407150102057](./../img/image-20220407150102057.png)



### 过程：

假设客户端向服务端发送了一个请求，希望建立连接，这个包一般叫SYN包；

服务端收到SYN包后，向客户端返回一个确认可以建立连接的包，是SYN包+ACK包；

客户端收到SYN包+ACK包后，对SYN包做校验，然后再将ACK包发给服务端；服务端收到后，2者都进入已连接状态；



### 为什么是3次握手，不是2次握手？

因为TCP的关键是要在不可靠的网络传输里实现可靠性，所以需要3次握手来消除某些SYN包延迟后导致多连接建立的问题：

比如客户端向服务端发送了SYN包1，因网络延迟，服务端未收到SYN包1,；客户端没有收到请求，捕获异常后重发了SYN包2，结果SYN包1又突然恢复了传输，服务端受到了SYN包1和SYN包2，建立了2个连接；而客户端认为SYN包1丢失了，只建立了1个连接；

两者之间存在状态不一致的危险。

通过让发送方再将ACK包传回，可以消除这种`已失效的、延迟的请求重复建立连接`可能。



> “这个问题的本质是, **信道不可靠,** 但是**通信双方需要数据传输的可靠性**, 三次通信是理论上的最小值. 三次握手是为了满足"在不可靠信道上可靠地传输信息"这一需求所导致的. 
>
> 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。这可视为对“三次握手”目的的另一种解答思路。
>
> 
>
> 作者：wuxinliulei
> 链接：https://www.zhihu.com/question/24853633/answer/63668444
> 来源：知乎
> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。





## 传输确认：

如何解决不可靠信道上可靠的数据传输？

如何解决丢包和乱序问题？

TCP为每一个连接建立了一个发送缓冲区，建立连接后需要发送的第一个字节数据的序号为0，此后逐个递加1。

发送数据时，从发送缓冲区取一部分组成发送报文，在头部加上起始序列号和长度。

接收端收到报文以后，需要返还ACK，ACK=起始序列号+内容长度，也就是下一包起始序列号；接收端将ACK返回给发送端；发送单将ACK号起始的数据再次发送；

如果发生丢包，可以通过将ACK设置为响应序列号请求重传。

![image-20220407150207494](./../img/image-20220407150207494.png)







![image-20220407150213815](./../img/image-20220407150213815.png)



## 四次挥手：

![image-20220407150304571](./../img/image-20220407150304571.png)

假设客户端发起关闭请求；

客户端发送1个FIN包给服务端，客户端变成FIN-WAIT 等待状态1；

服务端收到FIN包以后，返回一个ACK包给客户端，自己编程CLOSE-WAIT等待关闭状态；

客户端收到ACK后，编程等待状态2；

此时客户端和服务端之间仍可以收发数据；



然后，服务端向客户端发送FIN包，自己进入等待ACK包的状态；客户端收到FIN包以后，在发送ACK包给服务端；

客户端发送ACK包以后，等待一段时间后关闭。

服务端收到ACK包后立即关闭；





### 为什么客户端需要超时等待一段时间？

因为假如客户端发送ACK包后立刻关闭，假如ACK包丢失，服务端会一直处于等待状态无法关闭；

假如客户端等待一段时间，ACK包丢失时，服务端会重发FIN包，给客户端响应的时间。



## UDP：

![image-20220407150331707](./../img/image-20220407150331707.png)

![image-20220407150338523](./../img/image-20220407150338523.png)



基于非连接的、无序的、无状态、性能损耗低、资源占用少；

不保证稳定、可靠；







## 对比



- TCP
  - 稳定可靠、准确性
  - 速度慢一些
  - 下载文件、发送邮件
- UDP
  - 速度快
  - 不可靠
  - 实时性要求高的
  - 隧道网络
    - VPN
    - VXLAN