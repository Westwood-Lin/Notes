- 技术栈
- 项目搭建与分析
  - 项目架构
  - 项目模块
  - 脚手架
  - 组件、路由、vuex
- 模块分配





# 1.yarn和npm对比

## 1.1	基本信息

#### 1.1.1	NPM

##### 定义

**npm**即node package manager，节点包管理器。它于 2010 年发布，开启了 Web 开发的新时代。在此之前，项目依赖项是手动下载和管理的。npm 将 Web 推向了新高度。

npm 实际上是三件事：

- 一个用于管理 npm 体验和npm IP的各方面的网站
- 一个注册表访问的JavaScript包的广泛公共数据库
- 用于通过终端与 npm 交互的命令行界面(CLI)

然而，当大多数人谈论 npm 时，他们通常指的是最后一个——CLI 工具。它作为默认包管理器随每个新的 Node 安装一起提供。



##### 具体步骤

NPM 的思路大概是这样的：

1. 买个服务器作为代码仓库（registry），在里面放所有需要被共享的代码

2. 发邮件通知 jQuery、Bootstrap、Underscore 等三方库的作者使用 npm publish 把代码提交到 registry 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）等。

3. 社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码

4. 下载完的代码出现在 node_modules 目录里，可以随意使用了。

这些可以被使用的代码被叫做「包」（package），这就是 NPM 名字的由来：Node Package(包) Manager(管理器)。



##### 发展

只有社区里的人都觉得 「npm 是个宝」的时候，第三方库作者才会考虑使用 npm。

**那么 npm 是怎么火的呢？**

npm 的发展是跟 Node.js 的发展相辅相成的。

Node.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 Node.js，但是 Node.js 缺少一个包管理器，于是他和 npm 的作者一拍即合、抱团取暖，最终 Node.js 内置了 npm。

后来随着 Node.js 的火爆，大家开始用 npm 来共享 JS 代码了，于是 jQuery 作者也将 jQuery 发布到 npm 了。

所以现在，你可以使用 npm install jquery 来下载 jQuery 代码。

现在用 npm 来分享代码已经成了前端的标配。



##### **发展历史**

- 2010 年：npm 发布，支持 Node.js。
- 2016 年：Yarn发布。它显示出比 npm 更高的性能。它还默认生成一个yarn.lock文件，使库的版本共享和精确复制变得更加容易和准确。
- 2017 年：npm 5 发布。它也提供自动生成的锁文件package-lock.json文件以响应yarn。
- 2018 年：npm 6 发布，提高了安全性。现在 npm 会在安装依赖之前检查安全漏洞。
- 2020 年：Yarn 2 和 npm 7 发布。这两个软件包都带有很棒的新功能。
- 2021 年：Yarn 3 发布并进行了各种改进。





#### 1.1.2	Yarn

Yarn：Facebook、Google、Exponent和Tilde 联合推出的新的JS包管理工具，是为弥补npm缺陷出现的。

##### **npm存在问题：**

- 速度慢
- 安装难以保持一致性：
  - "5.0.3"	安装5.0.3版本
  - "-5.0.3"   安装5.0.x最新版本
  - "^5.0.3"  安装5.x.x最新版本
  - 三者表示不同的意思。
- 如果其中一个包下载错误，npm会继续下载和安装包，打印时错误信息和警告信息混杂，不容易发现。



##### **Yarn的优点：**

- 速度快
  - npm按队列安装每个package，yarn并行安装package，效率更高
  - 离线模式：yarn安装软件包时会进行缓存，再次安装该包时，可以从缓冲中获取
- 版本统一
  - 为防止拉取到不同版本，Yarn有一个锁定文件 lock file，记录了被确切安装的模块的版本号。确保每一次拉取同一个项目依赖时，能做到模块版本相同。
- 输出更简洁
- 注册来源多样



## 1.2	2021年底的两者对比

### 1.2.1	自身的安装

npm 预装了 Node，所以不需要手动安装 npm。



Yarn需要显式安装。

全局安装Yarn：

```bash
npm install -g yarn
```



yarn可以灵活地对**不同项目使用不同的yarn版本**：

我们可以在项目中设置所需要的Yarn版本。可以通过命令yarn set version在项目的根目录中运行，来做到这一点：

```bash
yarn set version berry
```

berry是我们要设置的yarn版本。

如果我们想更新到yarn最新版本，运行：

```
yarn set version latest
```



而对于npm，想做到这一点，需要安装`nvm`（节点版本管理器）。



### 1.2.2	项目依赖安装方式

使用`npm install`，依赖项会按队列串行安装。终端中的输出日志信息丰富，但难以阅读。

对于 Yarn，直接运行 `yarn` 命令。Yarn 并行安装包，速度更快。Yarn的输出日志不同版本不同，yarn 1 输出日志简洁干净，yarn 2、3 的输出日志并不直观。



### 1.2.3	命令比较

npm 和 Yarn 共享许多命令，但也有许多命令不同。

相同的命令：

- `npm init`| `yarn init`: 创建一个新包
- `npm run`| `yarn run`: 运行定义在package.json
- `npm test`| `yarn test`: 测试一个包
- `npm publish`| `yarn publish`: 发布包
- `npm cache clean`| `yarn cache clean`：从缓存文件夹中删除所有数据



这些命令使两个管理器之间的切换变得容易，但还有不同的命令：

- `npm install`| `yarn`: 安装依赖
- `npm install [package]`| `yarn add [package]`: 安装一个包
- `npm install --save-dev [package]`| `yarn add - -dev [package]`: 安装一个包作为开发依赖
- `npm uninstall [package]`| `yarn remove [package]`: 卸载一个包
- `npm uninstall --save-dev [package]`| `yarn remove [package]`: 卸载开发依赖包
- `npm update`| `yarn upgrade`: 更新依赖
- `npm update [package]`| `yarn upgrade [package]`: 更新一个包

Yarn 也有一些独特的命令，它们没有 npm 等效项。例如，`why`命令显示需要包的原因：它可能是依赖项、本机模块或项目依赖项。



### 1.2.4	速度

 npm 中，安装任务按包顺序串行执行，这意味着它会等待一个包完全安装，然后再继续下一个。

相比之下，Yarn 并行执行这些任务，从而提高了性能。

虽然这两个都提供缓存机制，但 Yarn 似乎做得更好一些。通过实现零安装范例，我们将在功能比较部分看到，它几乎可以立即安装软件包。Yarn会缓存每个包并将其保存在磁盘上，因此在此包的下一次安装中，甚至不需要联网，因为该包是从磁盘离线安装的。

尽管 Yarn 有一些优势，但 Yarn 和 npm 在它们的最新版本中的速度相当。

所以实际上Yarn领先不多.



### 1.2.5	安全性

以前的 npm 版本有几个严重的安全漏洞。

从版本 6 开始，npm 会在安装过程中审核软件包并告诉您是否发现了任何漏洞。我们可以通过npm audit针对已安装的软件包运行来手动执行此检查。

如果发现任何漏洞，npm 会给我们安全建议。也可以运行`npm audit fix`来修复包漏洞，如果可能的话，依赖树将被修复。

Yarn 和 npm 都使用**加密哈希算法**来确保包的完整性。



### 1.2.6	功能比较

**锁定文件**：

npm 可能会导致两台机器在相同的package.json文件下，安装了不同版本的软件包——这可能会引入错误。

为避免包版本不同，确切安装的版本被固定在包锁定文件中。

每次添加模块时，npm 和 Yarn 分别创建（或更新）一个package-lock.json和yarn.lock文件。这样可以保证另一台机器安装完全相同的软件包，同时仍然具有package.json.



**使用工作区**：

工作区允许拥有一个`monorepo`来管理跨多个项目的依赖项。这意味着有一个单一的顶级根包，其中包含多个称为工作区的子包。

（这个有点看不懂）



**远程运行脚本**：

npx命令用于从`./node_modules/.bin. `它还允许从 npm 注册表中执行包，而无需将它们安装在项目依赖项中。例如，可以运行以下命令来创建一个新的 React 应用程序：

```bash
npx create-react-app my-app
```

在 Yarn 中，可以使用`dlx`命令获得相同的结果：

```bash
yarn dlx create-react-app my-app
```



**以下是Yarn独有的功能：**

**零安装**

零安装将缓存存储在项目目录中的一个.yarn文件夹中。当使用`yarn`或`yarn add <package>`等命令时，Yarn 将创建一个`.pnp.cjs`文件。此文件包含 Node 用于加载项目包的依赖关系层次结构。因此，几乎可以在零时间访问它们。



**即插即用**

`Plug'n'Play` 是另一种安装策略。`node_modulesYarn `没有生成目录并将解析留给 Node，而是生成一个`.pnp.cjs`文件，将包映射到它们在磁盘上的位置和它们的依赖项列表。这个特性可以带来更快的项目启动、更好的优化依赖树、更快的安装时间，当然也不需要`node_modules`文件夹。



**执照**

Yarn 包含一个内置的许可证检查器，当开发应用程序时，它可以在不同的场景中使用。而npm需要nvm的帮助。



### 1.2.7	总结

一般来说：

- 如果对当前的工作流程感到满意，不想安装额外工具，或者没有大量磁盘空间，请选择 npm。
- 如果想要一些很棒的功能，例如 `Plug'n'Play`，需要 npm 中缺少的功能，并且有足够的磁盘空间，请选择 Yarn。

如果还是很难在 npm 和 Yarn 之间决定，那么你可以查看`pnpm`，它视图结合二者优点。
